import multer from "multer";
import fs from "fs";
import path from "path";

// --- C√ÅC C·∫§U H√åNH M·∫∂C ƒê·ªäNH ---

// üß§ B·ªô l·ªçc ·∫£nh m·∫∑c ƒë·ªãnh (gi·ªëng code c·ªßa b·∫°n)
const defaultFileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith("image/")) {
    cb(null, true);
  } else {
    cb(new Error("Ch·ªâ cho ph√©p upload file ·∫£nh"), false);
  }
};

// üèãÔ∏è Gi·ªõi h·∫°n dung l∆∞·ª£ng 5MB m·∫∑c ƒë·ªãnh (gi·ªëng code c·ªßa b·∫°n)
const defaultLimits = { fileSize: 5 * 1024 * 1024 };

// --- H√ÄM KH·ªûI T·∫†O UPLOADER ---

/**
 * T·∫°o m·ªôt middleware Multer c√≥ th·ªÉ t√πy ch·ªânh
 * @param {object} options
 * @param {(req: Request) => string} options.destinationGenerator - H√†m tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë√≠ch.
 * @param {function} [options.customFileFilter] - (T√πy ch·ªçn) B·ªô l·ªçc file t√πy ch·ªânh.
 * @param {object} [options.customLimits] - (T√πy ch·ªçn) Gi·ªõi h·∫°n file t√πy ch·ªânh.
 */
export const createUploader = ({
  destinationGenerator,
  customFileFilter,
  customLimits,
}) => {
  // ‚öôÔ∏è T·∫°o storage config
  const storage = multer.diskStorage({
    destination: (req, file, cb) => {
      // ‚ùóÔ∏è ƒêi·ªÉm m·∫•u ch·ªët: D√πng h√†m ƒë∆∞·ª£c truy·ªÅn v√†o ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n
      const folderPath = destinationGenerator(req);

      // t·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
      if (!fs.existsSync(folderPath)) {
        fs.mkdirSync(folderPath, { recursive: true });
      }

      cb(null, folderPath);
    },
    filename: (req, file, cb) => {
      // Logic ƒë·∫∑t t√™n file n√†y kh√° t·ªët v√† c√≥ th·ªÉ d√πng chung
      const ext = path.extname(file.originalname);
      const baseName = path.basename(file.originalname, ext);
      const timestamp = Date.now();
      cb(null, `${baseName}_${timestamp}${ext}`);
    },
  });

  // S·ª≠ d·ª•ng b·ªô l·ªçc/gi·ªõi h·∫°n t√πy ch·ªânh n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng m·∫∑c ƒë·ªãnh
  const fileFilter = customFileFilter || defaultFileFilter;
  const limits = customLimits || defaultLimits;

  return multer({ storage, fileFilter, limits });
};
