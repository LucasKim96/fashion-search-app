// server/src/middlewares/errorHandler.js
import { errorResponse } from "../utils/apiResponse.js";
import ApiError from "../utils/apiError.js";

export const errorHandler = (err, req, res, next) => {
  // 1Ô∏è‚É£ N·∫øu l·ªói l√† ApiError th√¨ l·∫•y status v√† message t·ª´ n√≥
  if (err instanceof ApiError) {
    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho l·ªói 404 - th√™m th√¥ng tin h·ªØu √≠ch cho frontend
    if (err.statusCode === 404) {
      return errorResponse(res, err.message, 404, {
        redirect: true,
        type: "not_found",
        path: req.originalUrl,
        method: req.method,
        timestamp: new Date().toISOString(),
      });
    }
    return errorResponse(res, err.message, err.statusCode);
  }

  // 2Ô∏è‚É£ L·ªói MongoDB - Duplicate Key (E11000)
  if (err.name === "MongoServerError" && err.code === 11000) {
    const field = Object.keys(err.keyPattern || {})[0];
    const message = field
      ? `${field} ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng`
      : "D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i (duplicate key)";
    return errorResponse(res, message, 409);
  }

  // 3Ô∏è‚É£ L·ªói MongoDB - Cast Error (ObjectId kh√¥ng h·ª£p l·ªá)
  if (err.name === "CastError") {
    const field = err.path || "ID";
    return errorResponse(res, `${field} kh√¥ng h·ª£p l·ªá`, 400);
  }

  // 4Ô∏è‚É£ L·ªói MongoDB - Validation Error
  if (err.name === "ValidationError") {
    const errors = Object.values(err.errors)
      .map((e) => e.message)
      .join(", ");
    return errorResponse(res, `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${errors}`, 400);
  }

  // 5Ô∏è‚É£ L·ªói MongoDB - Timeout
  if (err.name === "MongoTimeoutError") {
    return errorResponse(res, "K·∫øt n·ªëi database b·ªã timeout", 408);
  }

  // 6Ô∏è‚É£ L·ªói MongoDB - Network
  if (err.name === "MongoNetworkError") {
    return errorResponse(res, "L·ªói k·∫øt n·ªëi database", 503);
  }

  // 7Ô∏è‚É£ L·ªói JWT
  if (err.name === "JsonWebTokenError") {
    return errorResponse(res, "Token kh√¥ng h·ª£p l·ªá", 401);
  }

  if (err.name === "TokenExpiredError") {
    return errorResponse(res, "Token ƒë√£ h·∫øt h·∫°n", 401);
  }

  // 8Ô∏è‚É£ L·ªói Syntax (JSON kh√¥ng h·ª£p l·ªá)
  if (err instanceof SyntaxError && err.status === 400 && "body" in err) {
    return errorResponse(res, "D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá", 400);
  }

  // 9Ô∏è‚É£ L·ªói Multer (upload file)
  if (err.code === "LIMIT_FILE_SIZE") {
    return errorResponse(res, "File qu√° l·ªõn", 413);
  }

  if (err.code === "LIMIT_UNEXPECTED_FILE") {
    return errorResponse(res, "File kh√¥ng ƒë∆∞·ª£c ph√©p", 400);
  }

  // üîü L·ªói c√≤n l·∫°i: Internal Server Error
  console.error("Unhandled Error:", err);
  return errorResponse(res, err.message || "L·ªói m√°y ch·ªß n·ªôi b·ªô", 500);
};

/**
 * Middleware x·ª≠ l√Ω route kh√¥ng t·ªìn t·∫°i (404)
 */
export const notFoundHandler = (req, res, next) => {
  return errorResponse(res, "API endpoint kh√¥ng t·ªìn t·∫°i", 404, {
    redirect: true,
    type: "route_not_found",
    path: req.originalUrl,
    method: req.method,
    availableEndpoints: [
      "GET /api/shops",
      "POST /api/shops",
      "GET /api/shops/:id",
      "PUT /api/shops/:id",
      "DELETE /api/shops/:id",
      "POST /api/auth/login",
      "POST /api/auth/register",
    ],
    timestamp: new Date().toISOString(),
  });
};
