// server/src/modules/shop/shop.service.js
import Shop from "./shop.model.js";

/**
 * ðŸ”¹ Láº¥y danh sÃ¡ch táº¥t cáº£ shop (hoáº·c cÃ³ thá»ƒ thÃªm filter sau nÃ y)
 */
export const getShops = async () => {
  return await Shop.find().populate("accountId", "username email");
};

/**
 * ðŸ”¹ Láº¥y chi tiáº¿t shop theo ID
 */
export const getShopById = async (shopId) => {
  const shop = await Shop.findById(shopId).populate(
    "accountId",
    "username email"
  );
  if (!shop) throw new Error("Shop not found");
  return shop;
};

/**
 * ðŸ”¹ Táº¡o shop má»›i
 */
export const createShop = async (data) => {
  const { shopName, logoUrl, coverUrl, description, accountId } = data;

  // Kiá»ƒm tra account Ä‘Ã£ cÃ³ shop chÆ°a (1 account = 1 shop)
  const existingShop = await Shop.findOne({ accountId });
  if (existingShop) throw new Error("This account already owns a shop");

  const shop = new Shop({
    shopName,
    logoUrl,
    coverUrl,
    description,
    accountId,
  });

  return await shop.save();
};

/**
 * ðŸ”¹ Cáº­p nháº­t shop (chá»‰ chá»§ shop Ä‘Æ°á»£c phÃ©p lÃ m)
 */
export const updateShop = async (shopId, accountId, updateData) => {
  const shop = await Shop.findById(shopId);
  if (!shop) throw new Error("Shop not found");

  if (shop.accountId.toString() !== accountId)
    throw new Error("Not authorized to update this shop");

  Object.assign(shop, updateData);
  return await shop.save();
};

/**
 * ðŸ”¹ XÃ³a shop (chá»‰ chá»§ shop Ä‘Æ°á»£c phÃ©p lÃ m)
 */
export const deleteShop = async (shopId, accountId) => {
  const shop = await Shop.findById(shopId);
  if (!shop) throw new Error("Shop not found");

  if (shop.accountId.toString() !== accountId)
    throw new Error("Not authorized to delete this shop");

  await Shop.findByIdAndDelete(shopId);
  return { message: "Shop deleted successfully" };
};

/**
 * ðŸ”¹ Cáº­p nháº­t tráº¡ng thÃ¡i (admin hoáº·c chá»§ shop)
 */
export const updateShopStatus = async (shopId, status) => {
  const validStatuses = ["active", "closed", "suspended"];
  if (!validStatuses.includes(status)) throw new Error("Invalid status");

  const shop = await Shop.findByIdAndUpdate(shopId, { status }, { new: true });

  if (!shop) throw new Error("Shop not found");
  return shop;
};
