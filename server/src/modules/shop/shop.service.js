import Shop from "./shop.model.js";

/**
 * üîπ L·∫•y danh s√°ch t·∫•t c·∫£ shop (ho·∫∑c c√≥ th·ªÉ th√™m filter sau n√†y)
 */
export const getShops = async () => {
  const shop = await Shop.findOne();
  // console.log(shop.accountId); // xem th·ª≠ c√≥ /ObjectId h·ª£p l·ªá kh√¥ng

  return await Shop.find().populate("accountId", "username phoneNumber");
};

/**
 * üîπ L·∫•y chi ti·∫øt shop theo ID
 */
export const getShopById = async (shopId) => {
  const shop = await Shop.findById(shopId).populate(
    "accountId",
    "username phoneNumber"
  );
  if (!shop) throw new Error("Kh√¥ng t√¨m th·∫•y shop");
  return shop;
};

/**
 * üîπ T·∫°o shop m·ªõi
 */
export const createShop = async (data) => {
  const { shopName, logoUrl, coverUrl, description, accountId } = data;

  // Ki·ªÉm tra account ƒë√£ c√≥ shop ch∆∞a (1 account = 1 shop)
  const existingShop = await Shop.findOne({ accountId });
  if (existingShop) throw new Error("T√†i kho·∫£n n√†y ƒë√£ c√≥ shop");

  const shop = new Shop({
    shopName,
    logoUrl,
    coverUrl,
    description,
    accountId,
  });

  return await shop.save();
};

/**
 * üîπ C·∫≠p nh·∫≠t shop (ch·ªâ ch·ªß shop ƒë∆∞·ª£c ph√©p l√†m)
 */
export const updateShop = async (shopId, accountId, updateData) => {
  const shop = await Shop.findById(shopId);
  if (!shop) throw new Error("Kh√¥ng t√¨m th·∫•y shop");

  if (shop.accountId.toString() !== accountId)
    throw new Error("Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t shop n√†y");

  Object.assign(shop, updateData);
  return await shop.save();
};

/**
 * üîπ X√≥a shop (ch·ªâ ch·ªß shop ƒë∆∞·ª£c ph√©p l√†m)
 */
export const deleteShop = async (shopId, accountId) => {
  const shop = await Shop.findById(shopId);
  if (!shop) throw new Error("Kh√¥ng t√¨m th·∫•y shop");

  if (shop.accountId.toString() !== accountId)
    throw new Error("Kh√¥ng c√≥ quy·ªÅn x√≥a shop n√†y");

  await Shop.findByIdAndDelete(shopId);
  return { message: "X√≥a shop th√†nh c√¥ng" };
};

/**
 * üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i (admin ho·∫∑c ch·ªß shop)
 */
export const updateShopStatus = async (shopId, status) => {
  const validStatuses = ["active", "closed", "suspended"];
  if (!validStatuses.includes(status))
    throw new Error("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá");

  const shop = await Shop.findByIdAndUpdate(shopId, { status }, { new: true });

  if (!shop) throw new Error("Kh√¥ng t√¨m th·∫•y shop");
  return shop;
};
