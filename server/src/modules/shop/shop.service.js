// server/src/modules/shop/shop.service.js
import Shop from "./shop.model.js";
import mongoose from "mongoose";
import ApiError from "../../utils/apiError.js";
import { Account } from "../account/index.js";
import { Role } from "../account/index.js";
import Product from "../product/product.model.js";
import ProductVariant from "../product/productVariant.model.js";
import { removeProductsFromAllCarts } from "../cart/cart.service.js";

/**
 * L·∫•y danh s√°ch shop v·ªõi ph√¢n trang + filter
 */
export const getShops = async (filters = {}, options = {}) => {
  let { page = 1, limit = 10 } = options;
  const query = {};

  // √©p ki·ªÉu an to√†n
  page = Math.max(parseInt(page) || 1, 1);
  limit = Math.max(parseInt(limit) || 20, 1);
  const maxLimit = 100;
  if (limit > maxLimit) limit = maxLimit;

  // validate & chu·∫©n h√≥a filters
  if (filters.status) {
    const validStatuses = ["active", "closed", "suspended"];
    if (!validStatuses.includes(filters.status)) {
      throw ApiError.badRequest("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá");
    }
    query.status = filters.status;
  }

  if (filters.shopName) {
    // t·∫°o regex an to√†n, tr√°nh l·ªói regex injection
    const safeName = filters.shopName.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    query.shopName = new RegExp(safeName, "i");
  }

  // ƒê·∫øm t·ªïng s·ªë documents
  const total = await Shop.countDocuments(query);

  // T√≠nh to√°n pagination
  const totalPages = Math.ceil(total / limit);
  const hasNextPage = page < totalPages;
  const hasPrevPage = page > 1;

  // L·∫•y data v·ªõi pagination
  const shops = await Shop.find(query)
    .populate("accountId", "username phoneNumber")
    .skip((page - 1) * limit)
    .limit(limit)
    .sort({ createdAt: -1 }); // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t

  return {
    data: shops,
    pagination: {
      currentPage: page,
      totalPages,
      totalItems: total,
      itemsPerPage: limit,
      hasNextPage,
      hasPrevPage,
      nextPage: hasNextPage ? page + 1 : null,
      prevPage: hasPrevPage ? page - 1 : null,
    },
  };
};

/**
 * L·∫•y chi ti·∫øt shop theo ID
 */
export const getShopById = async (shopId) => {
  if (!mongoose.Types.ObjectId.isValid(shopId))
    throw ApiError.badRequest("ID shop kh√¥ng h·ª£p l·ªá");

  const shop = await Shop.findById(shopId).populate(
    "accountId",
    "username phoneNumber"
  );
  if (!shop) throw ApiError.notFound("Kh√¥ng t√¨m th·∫•y shop");
  return shop;
};

/**
 * T·∫°o shop m·ªõi
 */
export const createShop = async (data) => {
  const { shopName, logoUrl, coverUrl, description, accountId } = data;

  // 1Ô∏è‚É£ Validate accountId
  if (!mongoose.Types.ObjectId.isValid(accountId))
    throw ApiError.badRequest("accountId kh√¥ng h·ª£p l·ªá");

  // 2Ô∏è‚É£ Validate shopName
  if (!shopName || !shopName.trim())
    throw ApiError.badRequest("T√™n shop l√† b·∫Øt bu·ªôc");

  // 3Ô∏è‚É£ Ki·ªÉm tra account t·ªìn t·∫°i
  const account = await Account.findById(accountId);
  if (!account) throw ApiError.notFound("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i");

  // 4Ô∏è‚É£ Ki·ªÉm tra account ƒë√£ c√≥ shop ch∆∞a
  const existingShop = await Shop.findOne({ accountId });
  if (existingShop) throw ApiError.conflict("T√†i kho·∫£n n√†y ƒë√£ c√≥ shop");

  // 5Ô∏è‚É£ Chu·∫©n h√≥a chu·ªói
  const trimmedShopName = shopName.trim();
  const trimmedDescription = description?.trim() || "";
  const trimmedLogoUrl = logoUrl?.trim() || "";
  const trimmedCoverUrl = coverUrl?.trim() || "";

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const shop = await Shop.create(
      [
        {
          shopName: trimmedShopName,
          logoUrl: trimmedLogoUrl,
          coverUrl: trimmedCoverUrl,
          description: trimmedDescription,
          accountId,
        },
      ],
      { session }
    );

    const shopOwnerRole = await Role.findOne({ roleName: "Ch·ªß shop" }).session(
      session
    );
    if (!shopOwnerRole)
      throw ApiError.internal("Kh√¥ng t√¨m th·∫•y role 'Ch·ªß shop'");

    await Account.updateOne(
      { _id: accountId },
      { $addToSet: { roles: shopOwnerRole._id } },
      { session }
    );

    await session.commitTransaction();
    session.endSession();
    return shop[0];
  } catch (err) {
    await session.abortTransaction();
    session.endSession();

    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ trong transaction
    if (err.code === 11000) {
      const field = Object.keys(err.keyPattern || {})[0];
      throw ApiError.conflict(`${field} ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng`);
    }

    if (err.name === "ValidationError") {
      const errors = Object.values(err.errors)
        .map((e) => e.message)
        .join(", ");
      throw ApiError.badRequest(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${errors}`);
    }

    throw err;
  }
};

/**
 * C·∫≠p nh·∫≠t shop (ch·ªâ ch·ªß shop ƒë∆∞·ª£c ph√©p l√†m)
 */
export const updateShop = async (shopId, accountId, updateData) => {
  // validate ID
  if (!mongoose.Types.ObjectId.isValid(shopId))
    throw ApiError.badRequest("ID shop kh√¥ng h·ª£p l·ªá");
  if (!mongoose.Types.ObjectId.isValid(accountId))
    throw ApiError.badRequest("accountId kh√¥ng h·ª£p l·ªá");

  // ki·ªÉm tra accountId c√≥ t·ªìn t·∫°i trong database kh√¥ng
  const account = await Account.findById(accountId);
  if (!account) {
    throw ApiError.notFound("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i");
  }

  const shop = await Shop.findById(shopId);
  if (!shop) throw ApiError.notFound("Kh√¥ng t√¨m th·∫•y shop");

  if (shop.accountId.toString() !== accountId)
    throw ApiError.forbidden("Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t shop n√†y");

  // ch·ªâ cho ph√©p update whitelist fields
  const allowedFields = ["shopName", "logoUrl", "coverUrl", "description"];
  const safeUpdates = {};
  for (const key of allowedFields) {
    if (updateData[key] !== undefined) {
      safeUpdates[key] =
        typeof updateData[key] === "string"
          ? updateData[key].trim()
          : updateData[key];
    }
  }

  Object.assign(shop, safeUpdates);

  try {
    return await shop.save();
  } catch (error) {
    // X·ª≠ l√Ω l·ªói validation t·ª´ mongoose
    if (error.name === "ValidationError") {
      const errors = Object.values(error.errors)
        .map((e) => e.message)
        .join(", ");
      throw ApiError.badRequest(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${errors}`);
    }

    if (error.code === 11000) {
      const field = Object.keys(error.keyPattern || {})[0];
      throw ApiError.conflict(`${field} ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng`);
    }

    throw error;
  }
};

/**
 * X√≥a shop (ch·ªâ ch·ªß shop ƒë∆∞·ª£c ph√©p l√†m)
 */
export const deleteShop = async (shopId, accountId) => {
  // 1Ô∏è‚É£ Validate ID
  if (!mongoose.Types.ObjectId.isValid(shopId))
    throw ApiError.badRequest("ID shop kh√¥ng h·ª£p l·ªá");
  if (!mongoose.Types.ObjectId.isValid(accountId))
    throw ApiError.badRequest("accountId kh√¥ng h·ª£p l·ªá");

  // 2Ô∏è‚É£ Ki·ªÉm tra t√†i kho·∫£n t·ªìn t·∫°i + roles
  const account = await Account.findById(accountId).populate("roles");
  if (!account) throw ApiError.notFound("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i");

  // 3Ô∏è‚É£ Ki·ªÉm tra shop
  const shop = await Shop.findById(shopId);
  if (!shop) throw ApiError.notFound("Kh√¥ng t√¨m th·∫•y shop");

  // 4Ô∏è‚É£ Ki·ªÉm tra quy·ªÅn
  const isSuperAdmin = account.roles.some(
    (r) => r.roleName === "Super Admin" || r.level >= 4
  );

  if (!isSuperAdmin && shop.accountId.toString() !== accountId)
    throw ApiError.forbidden("Kh√¥ng c√≥ quy·ªÅn x√≥a shop n√†y");

  // 5Ô∏è‚É£ B·∫Øt ƒë·∫ßu transaction
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // 6Ô∏è‚É£ T√¨m t·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa shop
    const products = await Product.find({ shopId }, { _id: 1 }, { session });
    const productIds = products.map((p) => p._id);

    // 7Ô∏è‚É£ X√≥a t·∫•t c·∫£ product variants c·ªßa shop
    if (productIds.length > 0) {
      await ProductVariant.deleteMany(
        { productId: { $in: productIds } },
        { session }
      );
    }

    // 8Ô∏è‚É£ X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa shop
    await Product.deleteMany({ shopId }, { session });

    // 8Ô∏è‚É£.5Ô∏è‚É£ X√≥a s·∫£n ph·∫©m kh·ªèi t·∫•t c·∫£ gi·ªè h√†ng (ngo√†i transaction)
    await removeProductsFromAllCarts(productIds);

    // 9Ô∏è‚É£ X√≥a shop
    await Shop.findByIdAndDelete(shopId, { session });

    // üîü X·ª≠ l√Ω role "Ch·ªß shop" n·∫øu c·∫ßn
    const shopOwnerRole = await Role.findOne({ roleName: "Ch·ªß shop" });
    if (shopOwnerRole) {
      // N·∫øu account kh√¥ng c√≤n shop n√†o n·ªØa th√¨ g·ª° role "Ch·ªß shop"
      const remainingShop = await Shop.findOne({ accountId: shop.accountId });
      if (!remainingShop) {
        await Account.updateOne(
          { _id: shop.accountId },
          { $pull: { roles: shopOwnerRole._id } },
          { session }
        );
      }
    }

    // 1Ô∏è‚É£1Ô∏è‚É£ Commit transaction
    await session.commitTransaction();
    session.endSession();

    // 1Ô∏è‚É£2Ô∏è‚É£ Tr·∫£ message kh√°c nhau
    const message = isSuperAdmin
      ? `Super Admin ƒë√£ x√≥a shop v√† ${productIds.length} s·∫£n ph·∫©m th√†nh c√¥ng`
      : `Shop c·ªßa b·∫°n v√† ${productIds.length} s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng`;

    return {
      message,
      deletedProducts: productIds.length,
    };
  } catch (error) {
    await session.abortTransaction();
    session.endSession();

    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ trong transaction
    if (error.name === "CastError") {
      throw ApiError.badRequest("ID kh√¥ng h·ª£p l·ªá");
    }

    if (error.name === "ValidationError") {
      const errors = Object.values(error.errors)
        .map((e) => e.message)
        .join(", ");
      throw ApiError.badRequest(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${errors}`);
    }

    throw error;
  }
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i (admin ho·∫∑c ch·ªß shop)
 */
export const updateShopStatus = async (shopId, status) => {
  // validate shopId
  if (!mongoose.Types.ObjectId.isValid(shopId))
    throw ApiError.badRequest("ID shop kh√¥ng h·ª£p l·ªá");

  const validStatuses = ["active", "closed", "suspended"];
  if (!validStatuses.includes(status))
    throw ApiError.badRequest("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá");

  // Transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n khi thay ƒë·ªïi tr·∫°ng th√°i
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const shop = await Shop.findByIdAndUpdate(
      shopId,
      { status },
      { new: true, session }
    );
    if (!shop) throw ApiError.notFound("Kh√¥ng t√¨m th·∫•y shop");

    // C√≥ th·ªÉ th√™m c√°c t√°c v·ª• li√™n quan khi ƒë√≥ng/m·ªü shop t·∫°i ƒë√¢y
    // V√≠ d·ª•: c·∫≠p nh·∫≠t cache, g·ª≠i notification, kh√≥a s·∫£n ph·∫©m,...

    await session.commitTransaction();
    session.endSession();
    return shop;
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    throw error;
  }
};
